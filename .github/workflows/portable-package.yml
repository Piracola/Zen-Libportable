# GitHub Actions 工作流：Zen 浏览器便携版打包
# 这个工作流每天上午 8 点检查 Zen 浏览器的更新，仅在检测到新版本时构建便携版
name: Portable Package Zen Browser

on:
  schedule:
    - cron: '0 8 * * *' # 每天上午 8 点自动运行
  workflow_dispatch: # 允许手动触发工作流
  push: # 每次推送代码后触发构建
    branches:
      - main
      - master

jobs:
  build:
    runs-on: windows-latest  # 使用 Windows 最新版本作为构建环境

    steps:
    # 步骤 1: 检出代码仓库
    - name: Checkout repository
      uses: actions/checkout@v4

    # 步骤 1.1: 恢复版本缓存
    - name: Cache version info
      uses: actions/cache@v4
      with:
        path: last_version.txt
        key: zen-version-${{ github.run_number }}
        restore-keys: |
          zen-version-

    # 步骤 2: 检查 Zen 浏览器版本更新
    - name: Check Zen Browser version
      id: version-check
      run: |
        # 获取最新版本信息
        $latest_url = "https://api.github.com/repos/zen-browser/desktop/releases/latest"
        try {
          $response = Invoke-RestMethod -Uri $latest_url
          $latest_version = $response.tag_name
          echo "Latest version: $latest_version"
          
          # 检查是否有缓存的版本文件
          $version_file = "last_version.txt"
          if (Test-Path $version_file) {
            $last_version = Get-Content $version_file
            echo "Last built version: $last_version"
            
            if ($last_version -eq $latest_version) {
              echo "No update available. Skipping build."
              echo "should_build=false" >> $env:GITHUB_OUTPUT
              exit 0
            } else {
              echo "New version available: $latest_version"
              echo "should_build=true" >> $env:GITHUB_OUTPUT
              $latest_version | Out-File -FilePath $version_file -Encoding UTF8
            }
          } else {
            echo "First run, building latest version: $latest_version"
            echo "should_build=true" >> $env:GITHUB_OUTPUT
            $latest_version | Out-File -FilePath $version_file -Encoding UTF8
          }
        } catch {
          echo "Failed to check version: $_"
          echo "should_build=true" >> $env:GITHUB_OUTPUT  # 如果检查失败，继续构建
        }

    # 步骤 3: 下载 Zen 浏览器的最新版本（仅在需要构建时）
    - name: Download Zen Browser
      if: steps.version-check.outputs.should_build == 'true'
      id: download-zen
      run: |
        # 下载 Zen 浏览器的最新版本压缩包
        $url = "https://github.com/zen-browser/desktop/releases/latest/download/zen.installer.exe"
        $output = "$env:GITHUB_WORKSPACE\zen-installer.exe"
        try {
          Invoke-WebRequest -Uri $url -OutFile $output
          echo "archive_path=$output" >> $env:GITHUB_OUTPUT
          echo "Downloaded file size: $((Get-Item $output).Length) bytes"
          echo "Downloaded file location: $output"
        } catch {
          echo "Failed to download Zen Browser: $_"
          exit 1
        }

    # 步骤 4: 解压 Zen 浏览器文件（仅在需要构建时）
    - name: Extract Zen Browser
      if: steps.version-check.outputs.should_build == 'true'
      run: |
        # 使用 7zip 解压 Zen 浏览器到 zen-browser 目录
        $archive = "${{ steps.download-zen.outputs.archive_path }}"
        echo "Looking for archive at: $archive"
        if (-not (Test-Path $archive)) {
          echo "Zen Browser archive not found at: $archive"
          echo "Current directory: $(Get-Location)"
          echo "Files in current directory:"
          Get-ChildItem -Path . -Name
          exit 1
        }
        echo "Archive found, size: $((Get-Item $archive).Length) bytes"
        New-Item -ItemType Directory -Force -Path "D:\zen"
        Set-Location -Path "D:\zen"
        echo "Extracting to: $(Get-Location)"
        7z x "$archive" -y
        echo "Extraction completed"
        Get-ChildItem -Path . -Name

    # 步骤 5: 复制本地 libportable 工具包到目标目录
    - name: Copy local libportable tools
      if: steps.version-check.outputs.should_build == 'true'
      run: |
        # 确保目标目录存在
        $targetDir = "D:\zen\core"
        if (-not (Test-Path $targetDir)) {
          New-Item -ItemType Directory -Force -Path $targetDir
        }
        
        # 复制本地 libportable 文件
        $libportableSource = "$env:GITHUB_WORKSPACE\libportable"
        echo "Copying libportable from: $libportableSource"
        echo "Files in libportable directory:"
        Get-ChildItem -Path $libportableSource -Name
        
        Copy-Item -Path "$libportableSource\*" -Destination $targetDir -Recurse -Force
        echo "libportable tools copied successfully"
        echo "Files in target directory:"
        Get-ChildItem -Path $targetDir -Name

    # 步骤 7: 运行便携版创建脚本（仅在需要构建时）
    - name: Create portable package
      if: steps.version-check.outputs.should_build == 'true'
      working-directory: D:\zen\core
      run: |
        # 运行便携版创建脚本，将 zen.exe 转换为便携版
        echo "Current directory: $(Get-Location)"
        echo "Files in current directory:"
        Get-ChildItem -Path . -Name
        ./injectpe.bat
        continue-on-error: true

    # 步骤 8: 打包最终的便携版文件（仅在需要构建时）
    - name: Package portable build
      if: steps.version-check.outputs.should_build == 'true'
      run: |
        # 使用 7zip 将处理后的 Zen 浏览器目录打包为便携版压缩包
        $sourceDir = "D:\zen\core"
        $outputZip = "$env:GITHUB_WORKSPACE\zen-portable.zip"
        echo "Packaging from: $sourceDir"
        echo "Output zip: $outputZip"
        7z a -tzip "$outputZip" "$sourceDir\*"
        echo "Package size: $((Get-Item $outputZip).Length) bytes"
      continue-on-error: true

    # 步骤 9: 上传构建产物作为工作流工件（仅在需要构建时）
    - name: Upload portable package artifact
      if: steps.version-check.outputs.should_build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: zen-portable
        path: ${{ github.workspace }}\zen-portable.zip
      continue-on-error: true

    # 步骤 10: 保存版本信息（仅在构建成功时）
    - name: Save version info
      if: steps.version-check.outputs.should_build == 'true'
      run: |
        # 保存当前构建的版本信息
        echo "Build completed successfully"
      continue-on-error: true